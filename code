#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <iomanip>
#include <bitset>
#include <string>
#include <sstream>
#include <unordered_map>
using namespace std;

bool brake = false;
int dataNum = 0;
int startOfData;
int endOfData;
struct instruction {
    int addr, v, opcode, rs, rt, rd, shamt, imm, asInt, funct, target, sa, data, dataArr[500];
    unsigned int asUint;
    string out, instr;
    instruction() {}
    instruction(int i, int addr) {
        asInt = i;
        this->addr = addr;
        asUint = (unsigned int)i;
        out = bitset<32>(asInt).to_string();
        {
            stringstream ss1;
            ss1 << out << "\t" << addr << "\t";
            out = ss1.str();
        }
        v = asUint >> 31;
        opcode = asUint >> 26;
        rs = asUint << 6 >> 27;
        rs = (asUint >> 21) & 0x0000001F;
        rt = asUint << 11 >> 27;
        rd = (asUint << 16) >> 27;
        sa = (asUint >> 6) & 0x1F;
        imm = asInt << 16 >> 16;
        funct = asUint << 26 >> 26;
        shamt = asUint << 21 >> 27;
        target = asUint << 6 >> 4;
        if (brake == true) {
            data = asInt & ~(1 << 31);
            if (asInt & (1 << 31)) {
                data = data - (1 << 31);
            }
            stringstream ss1;
            ss1 << data;
            instr = ss1.str();
            out += instr;
            dataNum++;
            endOfData = startOfData + (dataNum * 4);
        }
        if (brake == false){
            if (v == 0) {
                instr = "Invalid Instruction";
                out += instr;
            } else if (opcode == 40) { // ADDI
                stringstream ss1;
                ss1 << "ADDI\tR" << rt << ", R" << rs << ", #" << imm;
                instr = ss1.str();
                out += instr;
            } else if (opcode == 43) { // SW
                stringstream ss1;
                ss1 << "SW\t\tR" << rt << ", " << imm << "(R" << rs << ")";
                instr = ss1.str();
                out += instr;
            } else if (opcode == 35) { // LW
                stringstream ss1;
                ss1 << "LW\t\tR" << rt << ", " << imm << "(R" << rs << ")";
                instr = ss1.str();
                out += instr;
            } else if (opcode == 33) { // BLTZ
                stringstream ss1;
                ss1 << "BLTZ\tR" << rs << ", #" << imm;
                instr = ss1.str();
                out += instr;
            } else if (opcode == 34) { // J
                stringstream ss1;
                ss1 << "J\t\t#" << target;
                instr = ss1.str();
                out += instr;
            } else if (opcode == 36) { // BEQ
                stringstream ss1;
                ss1 << "BEQ\tR" << rt << ", R" << rs << ", #" << imm;
                instr = ss1.str();
                out += instr;
            } else if (opcode == 60) { // MUL
                stringstream ss1;
                ss1 << "MUL\t\tR" << rd << ", R" << rs << ", R" << rt;
                instr = ss1.str();
                out += instr;
            } else if (opcode == 32) {
                if (funct == 34) { //SUB
                    stringstream ss1;
                    ss1 << "SUB\t\tR" << rd << ", R" << rs << ", R" << rt;
                    instr = ss1.str();
                    out += instr;
                } else if (funct == 32) { //ADD
                    stringstream ss1;
                    ss1 << "ADD\t\tR" << rd << ", R" << rs << ", R" << rt;
                    instr = ss1.str();
                    out += instr;
                } else if (funct == 8) { //JR
                    stringstream ss1;
                    ss1 << "JR\t\tR" << rs;
                    instr = ss1.str();
                    out += instr;
                } else if (funct == 0) {
                    if (shamt == 0) { //NOP
                        stringstream ss1;
                        ss1 << "NOP";
                        instr = ss1.str();
                        out += instr;
                    } else { //SLL
                        stringstream ss1;
                        ss1 << "SLL\t\tR" << rd << ", R" << rt << ", #" << sa;
                        instr = ss1.str();
                        out += instr;
                    }
                } else if (funct == 2) { //SRL
                    stringstream ss1;
                    ss1 << "SRL\t\tR" << rd << ", R" << rt << ", #" << sa;
                    instr = ss1.str();
                    out += instr;
                } else if (funct == 10) { //MOVZ
                    stringstream ss1;
                    ss1 << "MOVZ\tR" << rd << ", R" << rs << ", R" << rt;
                    instr = ss1.str();
                    out += instr;
                } else if (funct == 13) { //BREAK
                    brake = true;
                    stringstream ss1;
                    ss1 << "BREAK";
                    instr = ss1.str();
                    out += instr;
                    startOfData = addr + 4;
                    
                }
            }
        }
    }

};

int main(int argc, char *argv[])
{
    char buffer[4];
    int i;
    char * iPtr;
    iPtr = (char*)(void*) &i;
    int addr = 96;
    int FD = open(argv[2], O_RDONLY);
    unordered_map< int, instruction> MEM;
    int amt = 4;
    while( amt != 0 )
    {
        amt = read(FD, buffer, 4);
        if( amt == 4)
        {
            iPtr[0] = buffer[3];
            iPtr[1] = buffer[2];
            iPtr[2] = buffer[1];
            iPtr[3] = buffer[0];

            instruction I( i, addr);
            cout << I.out <<endl;

            MEM[addr] = I;
            addr += 4;
        }
    }
    
    struct processor{
        int PC = 96, cycle = 1, R[32] = {0};

        void print( const instruction  &I, unordered_map< int, instruction> MEM ){
            stringstream ss1;
            ss1 << "====================\ncycle:" << cycle << "\t"
                << PC <<"\t\t" << I.instr << "\n\nregisters:";
            for( int i = 0; i < 32; i++ ){
                if( i %8 == 0 )         ss1 << "\n" << "r" << setfill('0') << setw(2) << i << ":";
                ss1 << "\t" << R[i];
            }
            
            ss1 << "\n\ndata:";
            for (int i = startOfData; i < endOfData; i+=4 ) {
                if ((((i-startOfData)/4) % 8) == 0) {
                    ss1 << "\n" << i << ":\t";
                }
                ss1 << "\t" << MEM[i].asInt;
            }
                
            
            
            cout << ss1.str() << endl;
        }

    };
    //sim!
    processor P;
    while( true ){
        bool isjump = false;
        bool isJR = false;
        instruction I = MEM[ P.PC ];
        while( I.v == 0 ){
            P.PC +=4;
            I = MEM[P.PC];
        }
        if( I.opcode == 40 ){
            //ADDI
            P.R[ I.rt ] = P.R[ I.rs ] + I.imm;
        } else if( I.opcode == 43 ) {
            //SW
            MEM[ I.imm + P.R[I.rs]].asInt = P.R[I.rt];
        } else if (I.opcode == 35) {
            //LW
            P.R[I.rt] = MEM[P.R[I.rs] + I.imm].asInt;
        } else if (I.opcode == 33) {
            //BLTZ
            if (P.R[I.rs] < 0) {
                P.PC = P.PC + 4 * I.imm;
            }
        } else if (I.opcode == 34) {
            //J
            isjump = true;
        } else if (I.opcode == 36) {
            //BEQ
            if (P.R[I.rs] == P.R[I.rt]) {
                P.PC += (I.imm << 2);
            }
        } else if (I.opcode == 60) {
            //MUL
            P.R[I.rd] = P.R[I.rs] * P.R[I.rt];
        } else if (I.opcode == 32) {
            if (I.funct == 34) {
                //SUB
                P.R[I.rd] = P.R[I.rs] - P.R[I.rt];
            } else if (I.funct == 32) {
                //ADD
                P.R[I.rd] = P.R[I.rs] + P.R[I.rt];
            } else if (I.funct == 8) {
                //JR
                isJR = true;
            } else if (I.funct == 0) {
                //SLL
                P.R[I.rd] = P.R[I.rt] << I.sa;
            } else if (I.funct == 2) {
                //SRL
                P.R[I.rd] = P.R[I.rt] >> I.sa;
            } else if (I.funct == 10) {
                //MOVZ
                if (P.R[I.rt] == 0) {
                    P.R[I.rd] = P.R[I.rs];
                }
            } else if (I.funct == 13) {
                //BREAK
                P.print( I, MEM );
                break;
            }
        }
        
        if (isjump == true){
            P.print( I, MEM );
            P.PC = I.target;
        } else if (isJR == true) {
            P.print( I , MEM);
            P.PC = P.R[I.rs];
        } else {
            P.print( I , MEM);
            P.PC+=4;
        }
        P.cycle++ ;
    }
}
